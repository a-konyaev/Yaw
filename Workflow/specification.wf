<!--Cхема потока работ: 
    RootActivity            - имя корневого составного действия, с которого начинается выполнение 
                                (не обязательный для подключаемого файла)
    DefaultNextActivityKey  - название ключа следующего действия по умолчанию (не обязательный для подключаемого файла)
 -->
<Workflow
  xmlns="http://schemas.yaw.ru/Workflow"
  xmlns:c="http://www.yaw.ru/CustomNextActivitiesKeys.xsd"
  RootActivity="имя_корневого_сост_действия"
  DefaultNextActivityKey="Yes" >

  <!--Подключение внешнего файла с описанием схемы
        Ref         - путь к подключаемому файлу с схемой
        
      - Подключаемые файлы должны иметь такой же формат, как и данный файл.
      - При разборе подключаемого файла атрибут DefaultNextActivityKey элемента Workflow должен или быть не задан, 
          или содержать такое же значение, как и DefaultNextActivityKey в данном файле
  -->
  <Include Ref="Uri файла с описанием схемы" />
  
  <!--Составное действие:
        Name      - имя действия (в данном контексте, это скорее имя определения действия).
                    Должно быть уникальным во всей схеме, в том числе с учетом подключаемых файлов
        Class     - полный тип класса, в котором реализована логика действия (необязательный параметр).
                    Класс должен быть унаследован от CompositeActivity.
                    Для инициализации и деинициализации всего составного действия в классе Class
                    можно переопределить виртуальные методы Initialize и Uninitialize.
        Tracking  - нужно ли выполнять отслеживание выполнения данного действия. По умолчанию = true.
                    Если = false, то перед выполнением действия для контекста выполнения не будет вызван 
                    метод ActivityExecuting, и аналогично, после выполнения - метод ActivityExecuted, 
                    а также для всех действий, которые будут выполняться в контексте выполнения данного действия,
                    Tracking автоматически будет установлен = false.
   --> 
  <CompositeActivity Name="имя_сост_действия" Class="тип_класса_сост_действия" Tracking="true">
    <!--список вложенных действий (должно быть хотя бы одно действие).
    возможны следующие определения действий:-->

    <!--Действие, которое выполняет заданный метод:
          Name        - локальное имя действия. При разборе схемы имя данного действия будет заменено на полное имя, 
                          которое имеет формат CompositeActivityName.ActivityName, т.е. вначале будет добавлен 
                          префикс с именем родительского составного действия, потом символ '.', 
                          и в конце локальное имя данного действия
          Initialize  - Имя метода, реализующего инициализацию действия. Метод с таким же именем должен быть определен
                          в классе составного действия тип_класса_сост_действия. Сигнатура метода должна соответствовать
                          делегату Action<WorkflowExecutionContext>. Также можно указывать методы, которые определены 
                          в корневом действие, используя префикс "Root."
          Uninitialize- Имя метода, реализующего деинициализацию действия. Метод с таким же именем должен быть определен
                          в классе составного действия тип_класса_сост_действия. Сигнатура метода должна соответствовать
                          делегату Action<WorkflowExecutionContext>. Также можно указывать методы, которые определены 
                          в корневом действие, используя префикс "Root."
          Execute     - имя метода, реализующего логику действия. Метод с таким же именем должен быть определен
                          в классе составного действия тип_класса_сост_действия. Сигнатура метода должна соответствовать
                          делегату ActivityExecutionMethod. Также можно указывать методы, которые определены 
                          в корневом действие, используя префикс "Root."
          Priority    - приоритет действия: от 1 (самый высокий) до 10 (самый низкий). По умолчанию = 5.
                        Суть приоритета в том, что если выполнение потока работ пытаются переключить на действие 
                        с приоритетом ниже, чем приоритет у текущего выполняемого действия, то переключение будет
                        отложено до момента, когда текущее выполнение потока работ попробует перейти к выполнению
                        следующего действия с приоритетом не выше действия-переключения.
                        Например (в скобках указан приоритет действий): 
                          - поток работ выполняет последовательность действий: А(4)->B(4)->C(5)
                          - поступает сигнал на переключение выполнения к действию X(5), когда выполняется действие А
                          - тогда поток работ выполнит действия: А->B->X
          Parameters  - параметры метода (необязательный атрибут). Параметры перечисляются через ';'. 
                          Каждый параметр задается как пара [Имя параметра]=[Значение параметра].
                          Если параметры заданы, то они будут переданы в метод дейтсвия при его вызове.
                          В качестве значений параметров можно указывать:
                            - строковые значения (чтобы передать xml-строку, ее нужно обернуть в CDATA, 
                                например, "<![CDATA[<a></a>]]>")
                            - ссылки на свойства данного составного действия, как @имя_свойства. Св-во имя_свойства
                                должно быть определено в классе составного действия тип_класса_сост_действия и 
                                иметь public get аксессор
                            - ссылки на свойства корневого составного действия: @Root.имя_свойства
                            - ссылки на свойства другого составного действия: @имя_сост_действия.имя_свойства
                            - встроенные функции Workflow, например, @@True (полный список см. ниже)
                              (если требуется передать строку типа "@123", то нужно экранировать первый символ: 
                                "\@123", чтобы значение параметро не было воспринато как ссылка)
                            - массивы: [значение1,...,значениеN]
          
          NextActivities - следующие действия к выполнению которых может быть выполнен переход после 
                          заверешения выполнения данного действия. Следующее действие определяется по результату, 
                          возвращаемому методом действия (назовем его РезультатМетода, он имеет тип NextActivityKey), 
                          по которому находится соответствующее действие из списка возможных. 
                          Следующие действия перечисляются через ';'. Каждое след. действие задается как пара 
                          [ключ след. действия]=[значение ключа]. Значение ключа может содержать:
                            - локальное имя следующего действия, которое также входит в текущее составное действие
                            - полное имя другого действия
                            - имя встроенной в Workflow функции для завершения выполнения данного составного действия: 
                               @@Return(КлючСледующегоДействия). Составное действие работает аналогично методу 
                               действия - тоже возвращает результат типа NextActivityKey.
                          Если по РезультатМетода не удалось определить следующее действие, то в качестве следующего 
                          действия берется действие, указанное в атрибуте DefaultNextActivity (см. ниже), 
                          а если этот атрибут не задан, то действие идущее сразу же после данного. 
                          Но если следующего дейсвия нет (т.е. данное было последним в составном действии), 
                          то происходит завершение выполнения составного действия с результатом выполнения 
                          DefaultNextActivityKey (он задается в атрибуте элемента Workflow).
                          Атрибут необязательный.
                          
          DefaultNextActivity - следующее действие по умолчанию. Значение задается аналогично значению ключа 
                          для NextActivities. Атрибут необязательный.
          
          Tracking       - аналогично CompositeActivity, но т.к. Activity как бы атомарное действие, то вкл/выкл
                          трекинга будет распространено только на данное действие
    -->
    <Activity Name="" Initialize="" Uninitialize="" Execute="" Priority="5"
              Parameters="имя1=p1;имя2=p2;...;имяN=pN;имя=@имя_параметра"
              NextActivities="Yes=111;No=222;Back=333" DefaultNextActivity="000"
              Tracking="true"/>

    <!--Упрощенная запись элемента Activity:
          вместо задания атрибута NextActivities можно перечислить ключи и их значения, как отдельные атрибуты,
          например, Yes="" No="" Back=""
    -->
    <Activity Name="" Initialize="" Uninitialize="" Execute="" Priority="5"
              Parameters="имя1=p1;имя2=p2;...;имяN=pN;имя=@имя_параметра" 
              c:Yes="" c:No="" c:Back=""
              Tracking="true"/>

    <!--Детализированная запись элемента Activity-->
    <Activity Name="" Initialize="" Uninitialize="" Execute="" Priority="5" Tracking="true">
      <Parameters>
        <Parameter Name="имя параметра">значение параметра</Parameter>
      </Parameters>
      <NextActivities>
        <NextActivity Key="Yes">локальное_имя_следующего_действия</NextActivity>
        <NextActivity Key="No"></NextActivity>
        <NextActivity Key="Back"></NextActivity>
      </NextActivities>
    </Activity>

    <!--Действие-ссылка на другое действие. При выполнении данного действия происходит 
        выполнение того действия, на которое указывает ссылка. Внешне, по принципу использования, 
        ReferenceActivity почти не отличается от Activity: просто в ReferenceActivity роль метода играет другое 
        действие. Соответственно, в результате выполнения действия будет получен результат типа NextActivityKey.
        
          Name        - имя действия. Должно быть уникальным в пределах составного действия
          Execute     - полное имя действия, которое нужно выполнить. Ссылаться можно как на составное действие,
                          так и на обычное (Activity).
          Priority    - аналогично, как и для Activity, но если приоритет данного действия выше, чем
                        приоритет вызываемого действия, то приоритет вызываемого действия (и всех других вызываемых
                        внутри вызываемого) будет установлен равным приоритету ReferenceActivity до окончания
                        выполнения ReferenceActivity.
          Parameters  - параметры, которые будут переданы в вызываемое действие (необязательный атрибут). 
                          Аналочисно, как для Activity.
          NextActivities - аналогично, как и для Activity
          Tracking       - аналогично CompositeActivity
          
          При вызове составного действия можно задать значение параметра StartActivity, который определен для
          всех составных действий. Этот параметр определяет, 
    -->
    <ReferenceActivity Name="" Initialize="" Uninitialize="" Execute="" Priority="5" 
                       Parameters="" 
                       NextActivities="" c:Yes="" c:No="" c:Back=""
                       Tracking="false"/>
    
    <!--Действие-подписчик на событие. При выполнении данного действия выполняется подписка на заданное событие, 
        при возникновении которого будет выполнено действие-обработчик.
        
          Name        - имя действия. Должно быть уникальным в пределах составного действия
          Event       - ссылка на событие. В качестве значения можно указывать:
                          - ссылку на событие данного составного действия, как @имя_события, где событие имя_события
                            должно быть определено в классе составного действия тип_класса_сост_действия и 
                            иметь public аксессор
                          - ссылка на событие корневого составного действия: @Root.имя_события
                          - ссылка на событие другого составного действия: @имя_сост_действия.имя_события
          Handler     - полное имя действия, которое должно быть выполнено при возникновении события
          HandlingType - тип подписки. Возможны значения:
                          - Синхронная обработка: текущее выполнение потока работ будет прервано и управление 
                              передастся в действие-обработчик события
                          - Асинхронная обработка: для вызова действия-обработчика события будет запущен дочерний 
                              поток работ, который будет работать параллельно с основным потоком работ
                         Не обязательный атрибут. Значение по умолчанию = Синхронная обработка.
          NextActivity - следующее действие. Аналогично, как и для Activity, только ключ след. действия один, который
                          неявно является ключ по умолчанию.
    -->
    <SubscribeToEvent Name="S1" Event="" Handler="" HandlingType="Sync" NextActivity=""/>
    <!--Действие-отписчик от события. При выполнении данного действия выполняется отписка от заданного события 
        обработчика, которым является действие-обработчик.
        
        Атрибуты - аналогично, как для SubscribeToEvent
    -->
    <UnsubscribeFromEvent Name="S2" Event="" Handler="" NextActivity=""/>

    <!--Действие входа в область, контролируемую монитором.
    
          Используется для синхронизации одновременной работы нескольких экземпляров потока работ 
          путем получения/освобождения блокировок.
          При выполнении данного действия экземпляр потока работ, в котором происходит выполнение данного действия, 
          пытается получить эксклюзивную блокировку с заданным именем. Если блокировка с таким именем уже получена 
          другим экземпляром потока работ, то выполнение данного экземпляра приостанавливается.

          Name        - имя действия. Должно быть уникальным в пределах составного действия
          LockName    - имя блокировки. Может быть произвольным, но следует понимать, что блокировка с таким именем 
                          по сути одна. Не обязательный атрибут. Используется, если MonitorType = Lock.
                          Если не задан, то используется глобальная блокировка.
          NextActivity - следующее действие, аналогично SubscribeToEvent
     -->
    <MonitorEnter Name="" LockName="" NextActivity=""/>
    <!--Действие выхода из области, контролируемой монитором
    
          При выполнении данного действия экземпляр потока работ, в котором происходит выполнение данного действия, 
          освобождает эксклюзивную блокировку с заданным именем. Если блокировку с таким именем ожидают другие 
          экземпляры потока работ, то первый в очереди ожидающих экземпляр автоматически получит эту блокировку и 
          возобновит выполнение.

          Атрибуты - аналогично, как для MonitorEnter
     -->
    <MonitorExit Name="" LockName="" NextActivity=""/>

    <!--Вспомогательный элемент, который используется для группировки содержимого схемы 
        с целью улучшения читабельности
    -->
    <Region Note="Заметка">
      <!--любые другие элементы, которые могут быть внутри CompositeActivity-->
    </Region>
  </CompositeActivity>

  <!--Связывание значений параметров с действиями, определенными в другом месте
      CompositeActivityName - имя составного действия, для дочерних действий которого 
                              описывается привязка значений параметров
  -->
  <ActivityParametersBindings CompositeActivityName="ИмяСостаногоДействия">
    <!--Связывание значений параметров для одного конкретного действия.
        ActivityName  - локальное имя действия, для которого нужно привязать значения параметров:
                        = 'ИмяДействия' для действий, которые входят в состав составного действия
                        = '.' для составного действия, имя которого указано в атрибуте CompositeActivityName
                          родительского элемента ActivityParametersBindings
        Parameters    - аналогично, как для Activity, но, при задании в качестве значения параметра ссылки на 
                          св-во действия, нужно указывать полное имя св-ва (т.е. @ИмяДействия.ИмяСв-ва)
                    
        Если привязка пареметра, например, P1 определена для действия A1 и, одновременно, 
          в описании действия A1 тоже есть задание параметра P1, то при выполнении действия используется 
          значение параметра, заданное в описании действия.
        
        Во всей схеме, в том числе с учетом подключаемых файлов, не должно быть более одного биндинга
          одного и того же параметра для одного и того же действия:
          
          ошибка:
            <ActivityParametersBinding ActivityName="Действие1">
                <Parameter Name="Параметр1">значение параметра</Parameter>
            </ActivityParametersBinding>
            <ActivityParametersBinding ActivityName="Действие1">
                <Parameter Name="Параметр1">значение параметра</Parameter>
            </ActivityParametersBinding>
          
          правильно:
            <ActivityParametersBinding ActivityName="Действие1">
                <Parameter Name="Параметр1">значение параметра</Parameter>
                <Parameter Name="Параметр2">значение параметра</Parameter>
            </ActivityParametersBinding>
            
          тоже правильно:
            в файле1:
            <ActivityParametersBinding ActivityName="Действие1">
                <Parameter Name="Параметр1">значение параметра</Parameter>
            </ActivityParametersBinding>
            в файле2:
            <ActivityParametersBinding ActivityName="Действие1">
                <Parameter Name="Параметр2">значение параметра</Parameter>
            </ActivityParametersBinding>
    -->
    <ActivityParametersBinding ActivityName="полное имя действия" Parameters="имя1=p1;...;имяN=pN">
      <Parameter Name="имя параметра">значение параметра</Parameter>
    </ActivityParametersBinding>
    
  </ActivityParametersBindings>
</Workflow>

<!--
  Встроенные функции Workflow:
    функции, которое можно передавать как в качестве значений параметров:
      @@True              - возвращает true
      @@False             - возвращает false
      
    функции, которые используются для выхода из составного действия:
      @@Return(КлючСледующегоДействия) - завершить выполнение составного действия и вернуть ключ следующего действия
-->

<!--
  Жизненный цикл действия:
  1) когда вызывается составное действие, то для него каждый раз выполняется последовательно:
      - вызов метода Initialize
      - выполнение вложенных действий, начиная с:
        - если параметр StartActivity задан, то с действия, имя которого задано в этом параметре
        - иначе - с первого действия
      - вызов метода Uninitialize
      
  2) когда вызывается обычное действие Activity внутри составного, то для него выполняется последовательно:
      - вызов метода Initialize родительского действия, но только если родит. действие еще не проинициализировано
      - вызов метода, указанного в атрибуте Initialize (если он задан)
      - вызов метода действия
      - вызов метода, указанного в атрибуте Uninitialize (если он задан)
      
  3) когда вызывается ReferenceActivity, то если оно ссылается на:
      а) обычное действие (Activity), то выполняется п. 1)
      б) составное действие (CompositeActivity), то выполняется п. 2)
-->